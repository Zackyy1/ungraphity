generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Scenario {
    id          String      @id @default(cuid())
    name        String
    description String?
    userId      String
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    color       String
    icon        String
    trackables  Trackable[]
}

model Trackable {
    id          String    @id @default(cuid())
    name        String
    description String?
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    records     Record[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    color       String
    icon        String
    Scenario    Scenario? @relation(fields: [scenarioId], references: [id])
    scenarioId  String?
}

model Record {
    id          String    @id @default(cuid())
    value       Float
    date        DateTime  @default(now())
    trackableId String
    trackable   Trackable @relation(fields: [trackableId], references: [id])
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Trackable     Trackable[]
    Scenario      Scenario[]
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
